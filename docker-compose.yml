version: '3.8'

services:
  # Inference Services (Multiple instances for load balancing)
  inference1:
    build: ./inference_service
    container_name: ai-inference-1
    environment:
      - SERVER_ID=inference1:5000
      - MODEL_VERSION=v1
      - PORT=5000
    ports:
      - "5001:5000"
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ai-network
    restart: unless-stopped

  inference2:
    build: ./inference_service
    container_name: ai-inference-2
    environment:
      - SERVER_ID=inference2:5000
      - MODEL_VERSION=v1
      - PORT=5000
    ports:
      - "5002:5000"
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ai-network
    restart: unless-stopped

  inference3:
    build: ./inference_service
    container_name: ai-inference-3
    environment:
      - SERVER_ID=inference3:5000
      - MODEL_VERSION=v2  # Canary version
      - PORT=5000
    ports:
      - "5003:5000"
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ai-network
    restart: unless-stopped

  # Load Balancer / SDN Controller
  load-balancer:
    build: ./controller
    container_name: ai-load-balancer
    environment:
      - BACKEND_SERVERS=inference1:5000,inference2:5000,inference3:5000
      - API_PORT=8080
      - VIRTUAL_IP=10.0.0.100
    ports:
      - "8080:8080"
      - "6653:6653"  # OpenFlow controller port
    depends_on:
      - inference1
      - inference2
      - inference3
    networks:
      - ai-network
    restart: unless-stopped

  # Frontend Web Interface
  frontend:
    image: nginx:alpine
    container_name: ai-frontend
    ports:
      - "8080:8080"
    volumes:
      - ./frontend/static_version:/usr/share/nginx/html:ro
    networks:
      - ai-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - ai-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:alpine
    container_name: ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-network
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  ai-network:
    driver: bridge
